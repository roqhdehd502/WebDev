<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/security 
      http://www.springframework.org/schema/security/spring-security.xsd 
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd">
   
   <!-- 해당 프로토콜의 로그인 감지 -->
   <http auto-config="true" use-expressions="true">
      <!-- 권한을 부여하여 해당 조건을 만족하지 않을때 로그인 페이지로 인터셉트한다 -->
      <intercept-url pattern="/login/loginForm" access="permitAll" />
	  <intercept-url pattern="/" access="permitAll" />
	  <intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
      <intercept-url pattern="/user/**" access="permitAll" />
	  <intercept-url pattern="/**" access="hasAnyRole('USER, ADMIN')" />
      
      <!-- csrf 토큰 구현 -->
      <csrf disabled="false"/>
      
      <!-- 로그인 폼 구현 -->
      <!-- form-login 태그로 기초적인 형태가 구축되고 속성값에 의해 커스터마이징 할 수 있다 -->
      <form-login login-page="/login/loginForm"
                    default-target-url="/"
                    authentication-failure-url="/login/loginForm?error"
                    username-parameter="id" 
                    password-parameter="password" />
      <!-- 로그아웃 폼 구현 -->
      <logout logout-url="/logout" logout-success-url="/" /> 
     
      <!-- 403(접근 거부) 에러 처리 -->
      <!-- 인증값과 권한값이 매칭이 안될경우 발생시킨다 -->
      <access-denied-handler error-page="/login/accessDenied"/>
   </http>
   
   <!-- 암호화 인코딩 객체 설정 -->
   <!-- <beans:bean id="customNoOpPasswordEncoder" class="edu.bit.ex.security.CustomNoOpPasswordEncoder"/> -->
   <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   
   <!-- DetailsService 설정  -->
   <beans:bean id="memberDetailsService" class="edu.bit.ex.security.MemberDetailsService" />
   <!-- <beans:bean id="memberDetailsService" class="edu.bit.ex.security.EmpDetailsService" /> -->
   
   <!-- provider -->
   <!-- DB에서 설정한 쿼리문으로 필요한 데이터들을 불러온다 --> 
   <authentication-manager>
      <authentication-provider user-service-ref="memberDetailsService">
      	 <!-- 패스워드 인코딩을 설정한다 -->
      	 <!-- bcrypt는 단방향 인코딩이므로 디코딩을 할 수 없어서 암호화한채로 계정을 비교한다 -->
      	 <password-encoder ref="bcryptPasswordEncoder"/>  
      </authentication-provider>
   </authentication-manager>
</beans:beans>